//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VOffice.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VOfficeEntities : DbContext
    {
        public VOfficeEntities()
            : base("name=VOfficeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<MeetingRoom> MeetingRooms { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<EventUserNotify> EventUserNotifies { get; set; }
        public virtual DbSet<ImportantJob> ImportantJobs { get; set; }
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<DocumentAttachment> DocumentAttachments { get; set; }
        public virtual DbSet<DocumentField> DocumentFields { get; set; }
        public virtual DbSet<DocumentFieldDepartment> DocumentFieldDepartments { get; set; }
        public virtual DbSet<DocumentHistory> DocumentHistories { get; set; }
        public virtual DbSet<DocumentOpinion> DocumentOpinions { get; set; }
        public virtual DbSet<DocumentOpinionAttachment> DocumentOpinionAttachments { get; set; }
        public virtual DbSet<DocumentRecipent> DocumentRecipents { get; set; }
        public virtual DbSet<DocumentSignedBy> DocumentSignedBies { get; set; }
        public virtual DbSet<ExternalSendReceiveDivision> ExternalSendReceiveDivisions { get; set; }
        public virtual DbSet<SystemConfig> SystemConfigs { get; set; }
        public virtual DbSet<SystemConfigDepartment> SystemConfigDepartments { get; set; }
        public virtual DbSet<TaskAttachment> TaskAttachments { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<DocumentDocumentField> DocumentDocumentFields { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<TaskType> TaskTypes { get; set; }
        public virtual DbSet<TaskDocument> TaskDocuments { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<ApplicationLogging> ApplicationLoggings { get; set; }
        public virtual DbSet<AspNetGroupRole> AspNetGroupRoles { get; set; }
        public virtual DbSet<AspNetGroup> AspNetGroups { get; set; }
        public virtual DbSet<AspNetGroupUser> AspNetGroupUsers { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<Function> Functions { get; set; }
        public virtual DbSet<RoleFunction> RoleFunctions { get; set; }
        public virtual DbSet<LeaderEvent> LeaderEvents { get; set; }
        public virtual DbSet<EventGoogleEvent> EventGoogleEvents { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<LoginHistory> LoginHistories { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DepartmentStaff> DepartmentStaffs { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskActivity> TaskActivities { get; set; }
        public virtual DbSet<TaskAssignee> TaskAssignees { get; set; }
        public virtual DbSet<TaskOpinion> TaskOpinions { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<DocumentDelivered> DocumentDelivereds { get; set; }
        public virtual DbSet<DocumentReceived> DocumentReceiveds { get; set; }
        public virtual DbSet<Notice> Notices { get; set; }
        public virtual DbSet<UserNotification> UserNotifications { get; set; }
        public virtual DbSet<NotificationCenter> NotificationCenters { get; set; }
    
        public virtual ObjectResult<SPGetMeetingRoom_Result> SPGetMeetingRoom(string keyword, string departmentId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetMeetingRoom_Result>("SPGetMeetingRoom", keywordParameter, departmentIdParameter, startParameter, limitParameter, total);
        }
    
        [DbFunction("VOfficeEntities", "fn_Split")]
        public virtual IQueryable<fn_Split_Result> fn_Split(string text, string delimiter)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_Split_Result>("[VOfficeEntities].[fn_Split](@text, @delimiter)", textParameter, delimiterParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SPGetDocumentType_Result> SPGetDocumentType(string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentType_Result>("SPGetDocumentType", keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetConfig_Result> SPGetConfig(string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetConfig_Result>("SPGetConfig", keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetDocumentField_Result> SPGetDocumentField(string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentField_Result>("SPGetDocumentField", keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetDocumentSignedBy_Result> SPGetDocumentSignedBy(string keyword, Nullable<int> departmentId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentSignedBy_Result>("SPGetDocumentSignedBy", keywordParameter, departmentIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetExternalSendReceiveDivision_Result> SPGetExternalSendReceiveDivision(string keyword, Nullable<int> departmentId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetExternalSendReceiveDivision_Result>("SPGetExternalSendReceiveDivision", keywordParameter, departmentIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual int SPDeleteDocumentDocumentField(Nullable<int> documentId, Nullable<int> documentFieldDepartmentId, Nullable<bool> receivedDocument)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var documentFieldDepartmentIdParameter = documentFieldDepartmentId.HasValue ?
                new ObjectParameter("documentFieldDepartmentId", documentFieldDepartmentId) :
                new ObjectParameter("documentFieldDepartmentId", typeof(int));
    
            var receivedDocumentParameter = receivedDocument.HasValue ?
                new ObjectParameter("receivedDocument", receivedDocument) :
                new ObjectParameter("receivedDocument", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteDocumentDocumentField", documentIdParameter, documentFieldDepartmentIdParameter, receivedDocumentParameter);
        }
    
        public virtual ObjectResult<SPGetDocumentDocumentField_Result> SPGetDocumentDocumentField(Nullable<int> documentId, Nullable<int> documentFieldDepartmentId, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var documentFieldDepartmentIdParameter = documentFieldDepartmentId.HasValue ?
                new ObjectParameter("documentFieldDepartmentId", documentFieldDepartmentId) :
                new ObjectParameter("documentFieldDepartmentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentDocumentField_Result>("SPGetDocumentDocumentField", documentIdParameter, documentFieldDepartmentIdParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetDocumentFieldDepartment_Result> SPGetDocumentFieldDepartment(Nullable<int> departmentID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentFieldDepartment_Result>("SPGetDocumentFieldDepartment", departmentIDParameter);
        }
    
        public virtual ObjectResult<SPGetDocumentDeliveredByDocumentReceivedId_Result> SPGetDocumentDeliveredByDocumentReceivedId(Nullable<int> documentReceivedId)
        {
            var documentReceivedIdParameter = documentReceivedId.HasValue ?
                new ObjectParameter("documentReceivedId", documentReceivedId) :
                new ObjectParameter("documentReceivedId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentDeliveredByDocumentReceivedId_Result>("SPGetDocumentDeliveredByDocumentReceivedId", documentReceivedIdParameter);
        }
    
        public virtual ObjectResult<SPGetDocumentReceivedByDocumentDeliveredId_Result> SPGetDocumentReceivedByDocumentDeliveredId(Nullable<int> documentDeliveredId)
        {
            var documentDeliveredIdParameter = documentDeliveredId.HasValue ?
                new ObjectParameter("documentDeliveredId", documentDeliveredId) :
                new ObjectParameter("documentDeliveredId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentReceivedByDocumentDeliveredId_Result>("SPGetDocumentReceivedByDocumentDeliveredId", documentDeliveredIdParameter);
        }
    
        public virtual ObjectResult<SPGetDepartment_Result> SPGetDepartment(string keyword, Nullable<int> parentId, Nullable<bool> active)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDepartment_Result>("SPGetDepartment", keywordParameter, parentIdParameter, activeParameter);
        }
    
        public virtual ObjectResult<string> SPGetSystemConfigDepartmentValue(string configTitle, Nullable<int> departmentId)
        {
            var configTitleParameter = configTitle != null ?
                new ObjectParameter("configTitle", configTitle) :
                new ObjectParameter("configTitle", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPGetSystemConfigDepartmentValue", configTitleParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetStatus_Result> SPGetStatus(string type, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetStatus_Result>("SPGetStatus", typeParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetStatusByCode_Result> SPGetStatusByCode(string type, string code)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetStatusByCode_Result>("SPGetStatusByCode", typeParameter, codeParameter);
        }
    
        public virtual ObjectResult<SPCheckUserDocumentReadable_Result> SPCheckUserDocumentReadable(string userId, Nullable<int> documentId, Nullable<bool> receivedDocument, Nullable<int> departmentId, string listSubDepartmentId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var receivedDocumentParameter = receivedDocument.HasValue ?
                new ObjectParameter("receivedDocument", receivedDocument) :
                new ObjectParameter("receivedDocument", typeof(bool));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var listSubDepartmentIdParameter = listSubDepartmentId != null ?
                new ObjectParameter("listSubDepartmentId", listSubDepartmentId) :
                new ObjectParameter("listSubDepartmentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPCheckUserDocumentReadable_Result>("SPCheckUserDocumentReadable", userIdParameter, documentIdParameter, receivedDocumentParameter, departmentIdParameter, listSubDepartmentIdParameter);
        }
    
        public virtual int SPGetDepartmentByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetDepartmentByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<SPGetProjectByDepartmentId_Result> SPGetProjectByDepartmentId(Nullable<int> departmentId, string keyword)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetProjectByDepartmentId_Result>("SPGetProjectByDepartmentId", departmentIdParameter, keywordParameter);
        }
    
        public virtual ObjectResult<SPGetTaskTypeByDepartmentId_Result> SPGetTaskTypeByDepartmentId(Nullable<int> departmentId, string keyword)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskTypeByDepartmentId_Result>("SPGetTaskTypeByDepartmentId", departmentIdParameter, keywordParameter);
        }
    
        public virtual ObjectResult<SPGetCustomerByDepartmentId_Result> SPGetCustomerByDepartmentId(Nullable<int> departmentId, string keyword)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetCustomerByDepartmentId_Result>("SPGetCustomerByDepartmentId", departmentIdParameter, keywordParameter);
        }
    
        public virtual ObjectResult<SPSearchListDocument_Result> SPSearchListDocument(string keyword, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userId, string listSubDepartmentId, Nullable<int> departmentId)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var listSubDepartmentIdParameter = listSubDepartmentId != null ?
                new ObjectParameter("listSubDepartmentId", listSubDepartmentId) :
                new ObjectParameter("listSubDepartmentId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPSearchListDocument_Result>("SPSearchListDocument", keywordParameter, startDateParameter, endDateParameter, userIdParameter, listSubDepartmentIdParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetAddedDocumentBook_Result> SPGetAddedDocumentBook(Nullable<int> departmentId, string keyword, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetAddedDocumentBook_Result>("SPGetAddedDocumentBook", departmentIdParameter, keywordParameter, startDateParameter, endDateParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPBuildOrganizationTree_Result> SPBuildOrganizationTree(Nullable<int> departmentId, string type, string action)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPBuildOrganizationTree_Result>("SPBuildOrganizationTree", departmentIdParameter, typeParameter, actionParameter);
        }
    
        public virtual ObjectResult<SPGetTaskAttachmentByRecordId_Result> SPGetTaskAttachmentByRecordId(string type, Nullable<int> recordId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("recordId", recordId) :
                new ObjectParameter("recordId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskAttachmentByRecordId_Result>("SPGetTaskAttachmentByRecordId", typeParameter, recordIdParameter);
        }
    
        public virtual ObjectResult<SPGetDocFieldDepartmentByDocIdAndReceivedDoc_Result> SPGetDocFieldDepartmentByDocIdAndReceivedDoc(Nullable<int> documentId, Nullable<bool> receivedDocument)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var receivedDocumentParameter = receivedDocument.HasValue ?
                new ObjectParameter("receivedDocument", receivedDocument) :
                new ObjectParameter("receivedDocument", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocFieldDepartmentByDocIdAndReceivedDoc_Result>("SPGetDocFieldDepartmentByDocIdAndReceivedDoc", documentIdParameter, receivedDocumentParameter);
        }
    
        public virtual ObjectResult<SPGetDocumentRecipentByDocIdAndRecivedDoc_Result> SPGetDocumentRecipentByDocIdAndRecivedDoc(Nullable<int> documentId, Nullable<bool> receivedDocument)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var receivedDocumentParameter = receivedDocument.HasValue ?
                new ObjectParameter("receivedDocument", receivedDocument) :
                new ObjectParameter("receivedDocument", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentRecipentByDocIdAndRecivedDoc_Result>("SPGetDocumentRecipentByDocIdAndRecivedDoc", documentIdParameter, receivedDocumentParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SPCheckReceivedNumber(Nullable<int> departmentId, string receivedNumber)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var receivedNumberParameter = receivedNumber != null ?
                new ObjectParameter("receivedNumber", receivedNumber) :
                new ObjectParameter("receivedNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPCheckReceivedNumber", departmentIdParameter, receivedNumberParameter);
        }
    
        public virtual ObjectResult<SPGetHistoryAddedBookDocument_Result> SPGetHistoryAddedBookDocument(Nullable<int> documentId, Nullable<bool> receivedDocument)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var receivedDocumentParameter = receivedDocument.HasValue ?
                new ObjectParameter("receivedDocument", receivedDocument) :
                new ObjectParameter("receivedDocument", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetHistoryAddedBookDocument_Result>("SPGetHistoryAddedBookDocument", documentIdParameter, receivedDocumentParameter);
        }
    
        public virtual ObjectResult<SPGetTaskOpinionByTaskId_Result> SPGetTaskOpinionByTaskId(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskOpinionByTaskId_Result>("SPGetTaskOpinionByTaskId", taskIdParameter);
        }
    
        public virtual ObjectResult<SPGetDetailDocument_Result> SPGetDetailDocument(string type, Nullable<int> @int)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var intParameter = @int.HasValue ?
                new ObjectParameter("int", @int) :
                new ObjectParameter("int", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDetailDocument_Result>("SPGetDetailDocument", typeParameter, intParameter);
        }
    
        public virtual ObjectResult<SPGetTaskByDocumentId_Result> SPGetTaskByDocumentId(Nullable<int> docId, Nullable<bool> receivedDocument, string userId, ObjectParameter total)
        {
            var docIdParameter = docId.HasValue ?
                new ObjectParameter("docId", docId) :
                new ObjectParameter("docId", typeof(int));
    
            var receivedDocumentParameter = receivedDocument.HasValue ?
                new ObjectParameter("receivedDocument", receivedDocument) :
                new ObjectParameter("receivedDocument", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskByDocumentId_Result>("SPGetTaskByDocumentId", docIdParameter, receivedDocumentParameter, userIdParameter, total);
        }
    
        public virtual ObjectResult<SPGetBirthDayByDepartmentId_Result> SPGetBirthDayByDepartmentId(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetBirthDayByDepartmentId_Result>("SPGetBirthDayByDepartmentId", departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetCustomer_Result> SPGetCustomer(Nullable<int> departmentId, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetCustomer_Result>("SPGetCustomer", departmentIdParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetMeetingRoomByDepartmentId_Result> SPGetMeetingRoomByDepartmentId(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetMeetingRoomByDepartmentId_Result>("SPGetMeetingRoomByDepartmentId", departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetSeniorLeaderStaff_Result> SPGetSeniorLeaderStaff(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetSeniorLeaderStaff_Result>("SPGetSeniorLeaderStaff", departmentIdParameter);
        }
    
        public virtual ObjectResult<SPCopyDocumentField_Result> SPCopyDocumentField(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPCopyDocumentField_Result>("SPCopyDocumentField", departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetEventOfDepartment_Result> SPGetEventOfDepartment(Nullable<int> type, Nullable<int> departmentId, string userId, Nullable<bool> morning, Nullable<System.DateTime> date)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var morningParameter = morning.HasValue ?
                new ObjectParameter("morning", morning) :
                new ObjectParameter("morning", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetEventOfDepartment_Result>("SPGetEventOfDepartment", typeParameter, departmentIdParameter, userIdParameter, morningParameter, dateParameter);
        }
    
        public virtual ObjectResult<SPGetDepartmentEventOfWeek_Result> SPGetDepartmentEventOfWeek(Nullable<int> departmentId, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDepartmentEventOfWeek_Result>("SPGetDepartmentEventOfWeek", departmentIdParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<SPGetDepartmentOrganiz_Result> SPGetDepartmentOrganiz(Nullable<int> type, Nullable<int> departmentId, string keyword)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDepartmentOrganiz_Result>("SPGetDepartmentOrganiz", typeParameter, departmentIdParameter, keywordParameter);
        }
    
        public virtual ObjectResult<SPGetEventUserNotifyByEventId_Result> SPGetEventUserNotifyByEventId(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetEventUserNotifyByEventId_Result>("SPGetEventUserNotifyByEventId", eventIdParameter);
        }
    
        public virtual ObjectResult<SPGetLeaderEventsByEventId_Result> SPGetLeaderEventsByEventId(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetLeaderEventsByEventId_Result>("SPGetLeaderEventsByEventId", eventIdParameter);
        }
    
        public virtual int SPCountNewDocument(string type, string keyword, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userId, string listSubDepartmentId, Nullable<int> departmentId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var listSubDepartmentIdParameter = listSubDepartmentId != null ?
                new ObjectParameter("listSubDepartmentId", listSubDepartmentId) :
                new ObjectParameter("listSubDepartmentId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCountNewDocument", typeParameter, keywordParameter, startDateParameter, endDateParameter, userIdParameter, listSubDepartmentIdParameter, departmentIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual int CountNewTask(string userID, Nullable<int> statusId, Nullable<System.DateTime> tungay, Nullable<System.DateTime> denngay, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var tungayParameter = tungay.HasValue ?
                new ObjectParameter("tungay", tungay) :
                new ObjectParameter("tungay", typeof(System.DateTime));
    
            var denngayParameter = denngay.HasValue ?
                new ObjectParameter("denngay", denngay) :
                new ObjectParameter("denngay", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountNewTask", userIDParameter, statusIdParameter, tungayParameter, denngayParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetStaffByDepartmentId_Result> SPGetStaffByDepartmentId(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetStaffByDepartmentId_Result>("SPGetStaffByDepartmentId", departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetLoginHistory_Result> SPGetLoginHistory(string userId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetLoginHistory_Result>("SPGetLoginHistory", userIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetListDepartmentByStaffId_Result> SPGetListDepartmentByStaffId(Nullable<int> staffId)
        {
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetListDepartmentByStaffId_Result>("SPGetListDepartmentByStaffId", staffIdParameter);
        }
    
        public virtual ObjectResult<SPGetDepartmentLeaderEventOfWeek_Result> SPGetDepartmentLeaderEventOfWeek(Nullable<int> departmentId, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDepartmentLeaderEventOfWeek_Result>("SPGetDepartmentLeaderEventOfWeek", departmentIdParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<SPGetImportantJob_Result> SPGetImportantJob(Nullable<int> departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> note)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var noteParameter = note.HasValue ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetImportantJob_Result>("SPGetImportantJob", departmentIdParameter, startDateParameter, endDateParameter, noteParameter);
        }
    
        public virtual ObjectResult<SPGetDepartmentByDepartmentId_Result> SPGetDepartmentByDepartmentId(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDepartmentByDepartmentId_Result>("SPGetDepartmentByDepartmentId", departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetDepartmentStaff_Result> SPGetDepartmentStaff(Nullable<int> type, Nullable<int> departmentId, Nullable<int> staffId)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDepartmentStaff_Result>("SPGetDepartmentStaff", typeParameter, departmentIdParameter, staffIdParameter);
        }
    
        public virtual ObjectResult<SPGetStaffNoAccountByDepartmentId_Result> SPGetStaffNoAccountByDepartmentId(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetStaffNoAccountByDepartmentId_Result>("SPGetStaffNoAccountByDepartmentId", departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetAspNetUserByUserIdOrUserName_Result> SPGetAspNetUserByUserIdOrUserName(string type, string keyword)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetAspNetUserByUserIdOrUserName_Result>("SPGetAspNetUserByUserIdOrUserName", typeParameter, keywordParameter);
        }
    
        public virtual ObjectResult<SPGetStaffByUserId_Result> SPGetStaffByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetStaffByUserId_Result>("SPGetStaffByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<SPGetProject_Result> SPGetProject(Nullable<int> departmentId, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetProject_Result>("SPGetProject", departmentIdParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetTaskType_Result> SPGetTaskType(Nullable<int> departmentId, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskType_Result>("SPGetTaskType", departmentIdParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetAspNetUsers_Result> SPGetAspNetUsers(string keyword, string group, Nullable<int> departmentId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var groupParameter = group != null ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetAspNetUsers_Result>("SPGetAspNetUsers", keywordParameter, groupParameter, departmentIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetGroupsForUser_Result> SPGetGroupsForUser(string userId, Nullable<bool> type)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetGroupsForUser_Result>("SPGetGroupsForUser", userIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<SPGetAllRoleByUserId_Result> SPGetAllRoleByUserId(string userId, Nullable<bool> menu)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var menuParameter = menu.HasValue ?
                new ObjectParameter("menu", menu) :
                new ObjectParameter("menu", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetAllRoleByUserId_Result>("SPGetAllRoleByUserId", userIdParameter, menuParameter);
        }
    
        public virtual ObjectResult<SPGetTaskActivityByTaskId_Result> SPGetTaskActivityByTaskId(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskActivityByTaskId_Result>("SPGetTaskActivityByTaskId", taskIdParameter);
        }
    
        public virtual ObjectResult<SPGetTaskReport_Result> SPGetTaskReport(Nullable<int> departmentId, string userId, string status, string keyword, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> dueFromDate, Nullable<System.DateTime> dueToDate, string taskType, string project, string assignee, string coprocessor, string supervisor, string customer, Nullable<bool> taskAssignee, string keywordDoc)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("startFromDate", startFromDate) :
                new ObjectParameter("startFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("startToDate", startToDate) :
                new ObjectParameter("startToDate", typeof(System.DateTime));
    
            var dueFromDateParameter = dueFromDate.HasValue ?
                new ObjectParameter("dueFromDate", dueFromDate) :
                new ObjectParameter("dueFromDate", typeof(System.DateTime));
    
            var dueToDateParameter = dueToDate.HasValue ?
                new ObjectParameter("dueToDate", dueToDate) :
                new ObjectParameter("dueToDate", typeof(System.DateTime));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("taskType", taskType) :
                new ObjectParameter("taskType", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("project", project) :
                new ObjectParameter("project", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("assignee", assignee) :
                new ObjectParameter("assignee", typeof(string));
    
            var coprocessorParameter = coprocessor != null ?
                new ObjectParameter("coprocessor", coprocessor) :
                new ObjectParameter("coprocessor", typeof(string));
    
            var supervisorParameter = supervisor != null ?
                new ObjectParameter("supervisor", supervisor) :
                new ObjectParameter("supervisor", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("customer", customer) :
                new ObjectParameter("customer", typeof(string));
    
            var taskAssigneeParameter = taskAssignee.HasValue ?
                new ObjectParameter("taskAssignee", taskAssignee) :
                new ObjectParameter("taskAssignee", typeof(bool));
    
            var keywordDocParameter = keywordDoc != null ?
                new ObjectParameter("keywordDoc", keywordDoc) :
                new ObjectParameter("keywordDoc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskReport_Result>("SPGetTaskReport", departmentIdParameter, userIdParameter, statusParameter, keywordParameter, fromDateParameter, toDateParameter, startFromDateParameter, startToDateParameter, dueFromDateParameter, dueToDateParameter, taskTypeParameter, projectParameter, assigneeParameter, coprocessorParameter, supervisorParameter, customerParameter, taskAssigneeParameter, keywordDocParameter);
        }
    
        public virtual ObjectResult<SPGetTaskDocumentHistory_Result> SPGetTaskDocumentHistory(Nullable<int> taskId, Nullable<int> documentId, string documentReceived)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var documentReceivedParameter = documentReceived != null ?
                new ObjectParameter("documentReceived", documentReceived) :
                new ObjectParameter("documentReceived", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskDocumentHistory_Result>("SPGetTaskDocumentHistory", taskIdParameter, documentIdParameter, documentReceivedParameter);
        }
    
        public virtual ObjectResult<SPGetTaskAssigneeByTaskId_Result> SPGetTaskAssigneeByTaskId(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskAssigneeByTaskId_Result>("SPGetTaskAssigneeByTaskId", taskIdParameter);
        }
    
        public virtual ObjectResult<SPGetTaskAdvance_Result> SPGetTaskAdvance(Nullable<int> departmentId, string userId, string status, string keyword, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> dueFromDate, Nullable<System.DateTime> dueToDate, string taskType, string project, string assignee, string coprocessor, string supervisor, string customer, Nullable<bool> taskAssignee, string keywordDoc, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("startFromDate", startFromDate) :
                new ObjectParameter("startFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("startToDate", startToDate) :
                new ObjectParameter("startToDate", typeof(System.DateTime));
    
            var dueFromDateParameter = dueFromDate.HasValue ?
                new ObjectParameter("dueFromDate", dueFromDate) :
                new ObjectParameter("dueFromDate", typeof(System.DateTime));
    
            var dueToDateParameter = dueToDate.HasValue ?
                new ObjectParameter("dueToDate", dueToDate) :
                new ObjectParameter("dueToDate", typeof(System.DateTime));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("taskType", taskType) :
                new ObjectParameter("taskType", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("project", project) :
                new ObjectParameter("project", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("assignee", assignee) :
                new ObjectParameter("assignee", typeof(string));
    
            var coprocessorParameter = coprocessor != null ?
                new ObjectParameter("coprocessor", coprocessor) :
                new ObjectParameter("coprocessor", typeof(string));
    
            var supervisorParameter = supervisor != null ?
                new ObjectParameter("supervisor", supervisor) :
                new ObjectParameter("supervisor", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("customer", customer) :
                new ObjectParameter("customer", typeof(string));
    
            var taskAssigneeParameter = taskAssignee.HasValue ?
                new ObjectParameter("taskAssignee", taskAssignee) :
                new ObjectParameter("taskAssignee", typeof(bool));
    
            var keywordDocParameter = keywordDoc != null ?
                new ObjectParameter("keywordDoc", keywordDoc) :
                new ObjectParameter("keywordDoc", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskAdvance_Result>("SPGetTaskAdvance", departmentIdParameter, userIdParameter, statusParameter, keywordParameter, fromDateParameter, toDateParameter, startFromDateParameter, startToDateParameter, dueFromDateParameter, dueToDateParameter, taskTypeParameter, projectParameter, assigneeParameter, coprocessorParameter, supervisorParameter, customerParameter, taskAssigneeParameter, keywordDocParameter, startParameter, limitParameter, total);
        }
    
        public virtual int CountExpiredTask(string userID, string type, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter total)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountExpiredTask", userIDParameter, typeParameter, startDateParameter, endDateParameter, total);
        }
    
        public virtual int CountTaskInStatus(string userID, string type, Nullable<int> statusId, Nullable<System.DateTime> tungay, Nullable<System.DateTime> denngay, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var tungayParameter = tungay.HasValue ?
                new ObjectParameter("tungay", tungay) :
                new ObjectParameter("tungay", typeof(System.DateTime));
    
            var denngayParameter = denngay.HasValue ?
                new ObjectParameter("denngay", denngay) :
                new ObjectParameter("denngay", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountTaskInStatus", userIDParameter, typeParameter, statusIdParameter, tungayParameter, denngayParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetComplexCount_Result> SPGetComplexCount(string userId, Nullable<int> departmentId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetComplexCount_Result>("SPGetComplexCount", userIdParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetTotalDocumentReport_Result> SPGetTotalDocumentReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string listDepartmentId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var listDepartmentIdParameter = listDepartmentId != null ?
                new ObjectParameter("ListDepartmentId", listDepartmentId) :
                new ObjectParameter("ListDepartmentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTotalDocumentReport_Result>("SPGetTotalDocumentReport", fromDateParameter, toDateParameter, listDepartmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetTotalDocumentReportList_Result> SPGetTotalDocumentReportList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string listDepartmentId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var listDepartmentIdParameter = listDepartmentId != null ?
                new ObjectParameter("ListDepartmentId", listDepartmentId) :
                new ObjectParameter("ListDepartmentId", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTotalDocumentReportList_Result>("SPGetTotalDocumentReportList", fromDateParameter, toDateParameter, listDepartmentIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetTaskOpinionAndActivityByUserId_Result> SPGetTaskOpinionAndActivityByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskOpinionAndActivityByUserId_Result>("SPGetTaskOpinionAndActivityByUserId", userIdParameter);
        }
    
        public virtual int SPCountUserDocument(string type, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userId, string listSubDepartmentId, Nullable<int> departmentId, ObjectParameter total)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var listSubDepartmentIdParameter = listSubDepartmentId != null ?
                new ObjectParameter("listSubDepartmentId", listSubDepartmentId) :
                new ObjectParameter("listSubDepartmentId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCountUserDocument", typeParameter, startDateParameter, endDateParameter, userIdParameter, listSubDepartmentIdParameter, departmentIdParameter, total);
        }
    
        public virtual int SPCountUserDocumentHaventRead(string type, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userId, string listSubDepartmentId, Nullable<int> departmentId, ObjectParameter total)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var listSubDepartmentIdParameter = listSubDepartmentId != null ?
                new ObjectParameter("listSubDepartmentId", listSubDepartmentId) :
                new ObjectParameter("listSubDepartmentId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCountUserDocumentHaventRead", typeParameter, startDateParameter, endDateParameter, userIdParameter, listSubDepartmentIdParameter, departmentIdParameter, total);
        }
    
        public virtual ObjectResult<SPGetListDocumentFieldDepartment_Result> SPGetListDocumentFieldDepartment(Nullable<int> departmentID, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetListDocumentFieldDepartment_Result>("SPGetListDocumentFieldDepartment", departmentIDParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetHistoryDocument_Result> SPGetHistoryDocument(Nullable<int> documentId, Nullable<bool> receivedDocument, Nullable<int> departmentId, string userId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var receivedDocumentParameter = receivedDocument.HasValue ?
                new ObjectParameter("receivedDocument", receivedDocument) :
                new ObjectParameter("receivedDocument", typeof(bool));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetHistoryDocument_Result>("SPGetHistoryDocument", documentIdParameter, receivedDocumentParameter, departmentIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SPGetTask_Result> SPGetTask(string userID, Nullable<int> statusId, Nullable<System.DateTime> tungay, Nullable<System.DateTime> denngay, string keyword, Nullable<int> documentId, Nullable<bool> documentReceived, Nullable<bool> assignToMe, Nullable<bool> relativeToMe, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            var tungayParameter = tungay.HasValue ?
                new ObjectParameter("tungay", tungay) :
                new ObjectParameter("tungay", typeof(System.DateTime));
    
            var denngayParameter = denngay.HasValue ?
                new ObjectParameter("denngay", denngay) :
                new ObjectParameter("denngay", typeof(System.DateTime));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var documentReceivedParameter = documentReceived.HasValue ?
                new ObjectParameter("documentReceived", documentReceived) :
                new ObjectParameter("documentReceived", typeof(bool));
    
            var assignToMeParameter = assignToMe.HasValue ?
                new ObjectParameter("assignToMe", assignToMe) :
                new ObjectParameter("assignToMe", typeof(bool));
    
            var relativeToMeParameter = relativeToMe.HasValue ?
                new ObjectParameter("relativeToMe", relativeToMe) :
                new ObjectParameter("relativeToMe", typeof(bool));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTask_Result>("SPGetTask", userIDParameter, statusIdParameter, tungayParameter, denngayParameter, keywordParameter, documentIdParameter, documentReceivedParameter, assignToMeParameter, relativeToMeParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetSubTaskOpinionByTaskOpinionId_Result> SPGetSubTaskOpinionByTaskOpinionId(Nullable<int> taskOpinionId)
        {
            var taskOpinionIdParameter = taskOpinionId.HasValue ?
                new ObjectParameter("taskOpinionId", taskOpinionId) :
                new ObjectParameter("taskOpinionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetSubTaskOpinionByTaskOpinionId_Result>("SPGetSubTaskOpinionByTaskOpinionId", taskOpinionIdParameter);
        }
    
        public virtual ObjectResult<SPGetTaskDocumentByTaskId_Result> SPGetTaskDocumentByTaskId(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskDocumentByTaskId_Result>("SPGetTaskDocumentByTaskId", taskIdParameter);
        }
    
        public virtual ObjectResult<SPGetTaskOpinionAndActivityByTaskId_Result> SPGetTaskOpinionAndActivityByTaskId(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskOpinionAndActivityByTaskId_Result>("SPGetTaskOpinionAndActivityByTaskId", taskIdParameter);
        }
    
        public virtual ObjectResult<SPCopySystemConfig_Result> SPCopySystemConfig(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPCopySystemConfig_Result>("SPCopySystemConfig", departmentIdParameter);
        }
    
        public virtual ObjectResult<SPGetTaskOpinionAndActivityByOpinionId_Result> SPGetTaskOpinionAndActivityByOpinionId(Nullable<int> opinionId)
        {
            var opinionIdParameter = opinionId.HasValue ?
                new ObjectParameter("opinionId", opinionId) :
                new ObjectParameter("opinionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskOpinionAndActivityByOpinionId_Result>("SPGetTaskOpinionAndActivityByOpinionId", opinionIdParameter);
        }
    
        public virtual ObjectResult<SPGetDocumentAdvance_Result> SPGetDocumentAdvance(Nullable<bool> documentReceived, Nullable<bool> documentDelivered, Nullable<bool> legalDocument, string keyword, Nullable<System.DateTime> documentDateStart, Nullable<System.DateTime> documentDateEnd, Nullable<System.DateTime> documentDateRDStart, Nullable<System.DateTime> documentDateRDEnd, string documentSign, string documentSignDelivered, string documentField, string documentType, string documentSecretLevel, string documentUrgencyLevel, Nullable<int> departmentId, string userId, string listSubDepartmentId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var documentReceivedParameter = documentReceived.HasValue ?
                new ObjectParameter("DocumentReceived", documentReceived) :
                new ObjectParameter("DocumentReceived", typeof(bool));
    
            var documentDeliveredParameter = documentDelivered.HasValue ?
                new ObjectParameter("DocumentDelivered", documentDelivered) :
                new ObjectParameter("DocumentDelivered", typeof(bool));
    
            var legalDocumentParameter = legalDocument.HasValue ?
                new ObjectParameter("LegalDocument", legalDocument) :
                new ObjectParameter("LegalDocument", typeof(bool));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var documentDateStartParameter = documentDateStart.HasValue ?
                new ObjectParameter("DocumentDateStart", documentDateStart) :
                new ObjectParameter("DocumentDateStart", typeof(System.DateTime));
    
            var documentDateEndParameter = documentDateEnd.HasValue ?
                new ObjectParameter("DocumentDateEnd", documentDateEnd) :
                new ObjectParameter("DocumentDateEnd", typeof(System.DateTime));
    
            var documentDateRDStartParameter = documentDateRDStart.HasValue ?
                new ObjectParameter("DocumentDateRDStart", documentDateRDStart) :
                new ObjectParameter("DocumentDateRDStart", typeof(System.DateTime));
    
            var documentDateRDEndParameter = documentDateRDEnd.HasValue ?
                new ObjectParameter("DocumentDateRDEnd", documentDateRDEnd) :
                new ObjectParameter("DocumentDateRDEnd", typeof(System.DateTime));
    
            var documentSignParameter = documentSign != null ?
                new ObjectParameter("DocumentSign", documentSign) :
                new ObjectParameter("DocumentSign", typeof(string));
    
            var documentSignDeliveredParameter = documentSignDelivered != null ?
                new ObjectParameter("DocumentSignDelivered", documentSignDelivered) :
                new ObjectParameter("DocumentSignDelivered", typeof(string));
    
            var documentFieldParameter = documentField != null ?
                new ObjectParameter("DocumentField", documentField) :
                new ObjectParameter("DocumentField", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentSecretLevelParameter = documentSecretLevel != null ?
                new ObjectParameter("DocumentSecretLevel", documentSecretLevel) :
                new ObjectParameter("DocumentSecretLevel", typeof(string));
    
            var documentUrgencyLevelParameter = documentUrgencyLevel != null ?
                new ObjectParameter("DocumentUrgencyLevel", documentUrgencyLevel) :
                new ObjectParameter("DocumentUrgencyLevel", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var listSubDepartmentIdParameter = listSubDepartmentId != null ?
                new ObjectParameter("ListSubDepartmentId", listSubDepartmentId) :
                new ObjectParameter("ListSubDepartmentId", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentAdvance_Result>("SPGetDocumentAdvance", documentReceivedParameter, documentDeliveredParameter, legalDocumentParameter, keywordParameter, documentDateStartParameter, documentDateEndParameter, documentDateRDStartParameter, documentDateRDEndParameter, documentSignParameter, documentSignDeliveredParameter, documentFieldParameter, documentTypeParameter, documentSecretLevelParameter, documentUrgencyLevelParameter, departmentIdParameter, userIdParameter, listSubDepartmentIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetRolesOfGroup_Result> SPGetRolesOfGroup(string groupId)
        {
            var groupIdParameter = groupId != null ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetRolesOfGroup_Result>("SPGetRolesOfGroup", groupIdParameter);
        }
    
        public virtual ObjectResult<SPGetRolesOfUser_Result> SPGetRolesOfUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetRolesOfUser_Result>("SPGetRolesOfUser", userIdParameter);
        }
    
        public virtual ObjectResult<SPGetTaskDetailById_Result> SPGetTaskDetailById(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskDetailById_Result>("SPGetTaskDetailById", taskIdParameter);
        }
    
        public virtual ObjectResult<SPGetDocumentDeliveredStatistics_Result> SPGetDocumentDeliveredStatistics(string keyword, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> departmentId, string listSignById, string listDocumentFieldID, string listDocumentTypeId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var listSignByIdParameter = listSignById != null ?
                new ObjectParameter("ListSignById", listSignById) :
                new ObjectParameter("ListSignById", typeof(string));
    
            var listDocumentFieldIDParameter = listDocumentFieldID != null ?
                new ObjectParameter("ListDocumentFieldID", listDocumentFieldID) :
                new ObjectParameter("ListDocumentFieldID", typeof(string));
    
            var listDocumentTypeIdParameter = listDocumentTypeId != null ?
                new ObjectParameter("ListDocumentTypeId", listDocumentTypeId) :
                new ObjectParameter("ListDocumentTypeId", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentDeliveredStatistics_Result>("SPGetDocumentDeliveredStatistics", keywordParameter, startDateParameter, endDateParameter, departmentIdParameter, listSignByIdParameter, listDocumentFieldIDParameter, listDocumentTypeIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetDocument_Result> SPGetDocument(string type, string keyword, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userId, string listSubDepartmentId, Nullable<int> departmentId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var listSubDepartmentIdParameter = listSubDepartmentId != null ?
                new ObjectParameter("listSubDepartmentId", listSubDepartmentId) :
                new ObjectParameter("listSubDepartmentId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocument_Result>("SPGetDocument", typeParameter, keywordParameter, startDateParameter, endDateParameter, userIdParameter, listSubDepartmentIdParameter, departmentIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetSystemConfigDepartment_Result> SPGetSystemConfigDepartment(string keyword, Nullable<int> departmentID, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetSystemConfigDepartment_Result>("SPGetSystemConfigDepartment", keywordParameter, departmentIDParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetNotice_Result> SPGetNotice(Nullable<int> department, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var departmentParameter = department.HasValue ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetNotice_Result>("SPGetNotice", departmentParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        [DbFunction("VOfficeEntities", "fn_SplitText")]
        public virtual IQueryable<fn_SplitText_Result> fn_SplitText(string text, string delimiter)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SplitText_Result>("[VOfficeEntities].[fn_SplitText](@text, @delimiter)", textParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<SPGetApplicationLogging_Result> SPGetApplicationLogging(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string modules, string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var modulesParameter = modules != null ?
                new ObjectParameter("modules", modules) :
                new ObjectParameter("modules", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetApplicationLogging_Result>("SPGetApplicationLogging", fromDateParameter, toDateParameter, modulesParameter, keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPSearchStaff_Result> SPSearchStaff(Nullable<int> departmentId, Nullable<int> parentId, string keyword, Nullable<bool> active)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPSearchStaff_Result>("SPSearchStaff", departmentIdParameter, parentIdParameter, keywordParameter, activeParameter);
        }
    
        public virtual ObjectResult<SPGETStaffNonOrExtraDepartment_Result> SPGETStaffNonOrExtraDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGETStaffNonOrExtraDepartment_Result>("SPGETStaffNonOrExtraDepartment");
        }
    
        public virtual ObjectResult<SPGetSubDepartmentByUserId_Result> SPGetSubDepartmentByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetSubDepartmentByUserId_Result>("SPGetSubDepartmentByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<SPGetNotificationCenter_Result> SPGetNotificationCenter(string userId, string deviceId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetNotificationCenter_Result>("SPGetNotificationCenter", userIdParameter, deviceIdParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetUserNotification_Result> SPGetUserNotification(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetUserNotification_Result>("SPGetUserNotification", userIdParameter);
        }
    
        public virtual ObjectResult<SPGetUserNotificationForDocumentAndEvent_Result> SPGetUserNotificationForDocumentAndEvent(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetUserNotificationForDocumentAndEvent_Result>("SPGetUserNotificationForDocumentAndEvent", departmentIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SPGetCountNotificationUnread(string userId, string deviceId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPGetCountNotificationUnread", userIdParameter, deviceIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SPCheckPermissionUserDocument(string userId, Nullable<int> documentId, Nullable<bool> receivedDocument, string listIdDepartment)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var receivedDocumentParameter = receivedDocument.HasValue ?
                new ObjectParameter("receivedDocument", receivedDocument) :
                new ObjectParameter("receivedDocument", typeof(bool));
    
            var listIdDepartmentParameter = listIdDepartment != null ?
                new ObjectParameter("listIdDepartment", listIdDepartment) :
                new ObjectParameter("listIdDepartment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SPCheckPermissionUserDocument", userIdParameter, documentIdParameter, receivedDocumentParameter, listIdDepartmentParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SPCheckPermissionUserTask(string userID, Nullable<int> taskId)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPCheckPermissionUserTask", userIDParameter, taskIdParameter);
        }
    
        public virtual ObjectResult<SPGetTaskMobile_Result> SPGetTaskMobile(string userID, string listStatusId, Nullable<bool> expired, Nullable<bool> assignee, Nullable<bool> coprocessor, Nullable<bool> supervisor, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var listStatusIdParameter = listStatusId != null ?
                new ObjectParameter("listStatusId", listStatusId) :
                new ObjectParameter("listStatusId", typeof(string));
    
            var expiredParameter = expired.HasValue ?
                new ObjectParameter("expired", expired) :
                new ObjectParameter("expired", typeof(bool));
    
            var assigneeParameter = assignee.HasValue ?
                new ObjectParameter("assignee", assignee) :
                new ObjectParameter("assignee", typeof(bool));
    
            var coprocessorParameter = coprocessor.HasValue ?
                new ObjectParameter("coprocessor", coprocessor) :
                new ObjectParameter("coprocessor", typeof(bool));
    
            var supervisorParameter = supervisor.HasValue ?
                new ObjectParameter("supervisor", supervisor) :
                new ObjectParameter("supervisor", typeof(bool));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaskMobile_Result>("SPGetTaskMobile", userIDParameter, listStatusIdParameter, expiredParameter, assigneeParameter, coprocessorParameter, supervisorParameter, startParameter, limitParameter, total);
        }
    }
}
